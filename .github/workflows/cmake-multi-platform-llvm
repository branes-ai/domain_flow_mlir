name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <MacOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
#       os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, windows-latest]
        llvm-branch: ['release/19.x']
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
#         - os: macos-latest
#           c_compiler: clang
#           cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
#         - os: macos-latest
#           c_compiler: gcc
#         - os: macos-latest
#           c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache LLVM build
      id: cache-llvm-build
      uses: actions/cache@v3
      with:
        path: llvm-install
        key: ${{ runner.os }}-llvm-${{ matrix.llvm-branch }}-${{ hashFiles('llvm-build-config.txt') }}

    - name: Clone LLVM
      if: steps.cache-llvm-build.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/llvm/llvm-project.git --branch ${{ matrix.llvm-branch }} --depth 1

    - name: Build LLVM (Unix/macOS)
      if: steps.cache-llvm-build.outputs.cache-hit != 'true' && (runner.os == 'Linux' || runner.os == 'macOS')
      run: |
        mkdir -p llvm-build
        cd llvm-build
        cmake ../llvm-project/llvm \
          -DLLVM_ENABLE_PROJECTS="mlir;clang" \
          -DLLVM_TARGETS_TO_BUILD="host" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/llvm-install"
        cmake --build . --target install -j$(nproc)
    
    - name: Build LLVM (Windows)
      if: steps.cache-llvm-build.outputs.cache-hit != 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        mkdir llvm-build
        cd llvm-build
        cmake ..\llvm-project\llvm `
          -DLLVM_ENABLE_PROJECTS="mlir;clang" `
          -DLLVM_TARGETS_TO_BUILD="host" `
          -DCMAKE_BUILD_TYPE=Release `
          -DLLVM_ENABLE_ASSERTIONS=ON `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/llvm-install"
        cmake --build . --target install --config Release -j $env:NUMBER_OF_PROCESSORS
    
    - name: Setup environment
      run: echo "${{ github.workspace }}/llvm-install/bin" >> $GITHUB_PATH

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DLLVM_DIR=${{ github.workspace }}/llvm-install/lib/cmake/llvm
        -DMLIR_DIR=${{ github.workspace }}/llvm-install/lib/cmake/mlir
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
